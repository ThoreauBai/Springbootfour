http://localhost:8888/picture.jpg  访问图片的路径
2 本地数据库存放的本地地址不可以用localhost
1 android 端的商品分类
2token 的创建验证        s生成token的url
                            https://github.com/JinBinPeng/springboot-jwt
3  分页
4  数据库的账户和密码都是root    root

5 添加你喜欢代码
6 实现网页

7   导入jar  包
<dependdency>
<grouId>string   -boot-starter-web </groupid>

</>


8   spring  boot  strart   帮助我们导入web 模块正常运行所依赖的组件
 zuo
web  声明依赖、


@springbootapication
Spring  boot 应用标注类说明这个类上说明类是springboot 的配置类

springbootConfigrationboot   的配置类
@configuration  配置类上来标注这个注解
标注在某个类上的  ,


spring   boot  配置文件
作用修改默认的配置
yml  是  YAMl Ain't Markup   langurage


yaml   isn't   MarkUp  language

以数据为中心

。application.preperties
.  application.yml

yaml  的语法
k:(空格)v:表示一对键值对（空格必须有）
空格的缩进表示控制层级关系，只有是左对齐的一列数据，都是同一层及

server：
   port：8081
   path：/hello
   、
两个注解之间的对比

   1  @configrationProperties
   批量注入配置文件中的属性
   松散语法绑定  支持     用“-”代表一个字母大写
speL  不支持              类似在代码注解中做算胡运算

JSR303数据校验     支持   注解@Validated
                             @Email   必须添加成为邮箱格式

   2@value

   一个一个的指定
   松散语法绑定  不支持支持
speL  不支持
JSR303数据校验 不支持

配置文件yml还是properties 他们都能获取值
如果，我们在某个业务逻辑中需要获取下一个配置文件中的某个值  使用@value;
如果说 我们专门编写一个
javaBean来和配置文件进行映射，
我们就直接使用 @configureationspre[erface
注解
@PropertySource(只能用于preperties文件) 结合读取指定文件
@PropertySource(Value=（"classpath:preson.prepertie"）)//  读取配置文件中的指定文件

@importResource  读取外部配置文件   导入Spring文件
配置 文件，让配置文件里面的内容生效

在Application中配置
@Import Resource(locations{"classpath:beans.xml"})  能够读取到特定的文件
spring Boot 里面没有Spring 的配置文件，我们自己编写的配置文件，也能自动识别想让spring 的配置 文件生效加载近来;@ImportResource
标住在一个配置类上

@configration   指明当前类为配置类，来代替之前的soring配置文件
2  使用@Bean 给容器中添加组件
@configuration
//  将方法的返回值类型添加到容器中，容器中的这个组件默认的id就是方法名
代码
@Bean
public   HelloServie helloSErvice02(){
System.out.println("fasdfasfsaf");}
return new HelloService();
}


3  配置文件的占位符

RandomValue Property Source：配置文件中可以使用随机数
{}
${random.value},${random.int}
属性占位符
app.name=MyApp
app.descripition=${app.name}
可以在配置文件中引用前面配置过的属性
占位符获取之前的配置，如果没有可以使用：指定默认值

配置文件
person.lat-name=张三$(random.uuid)
person.dog,name=$(person.hello:hello)_dog
person.hello  的方法是没有的

5  profile
profile 是对spring 对不同环境提供配置功能的支持 可以通过激活 指定参数等方式快速切换黄江
1多profile 文件形式
-格式：application{profile}.properties:
.application-dev.properties, application-prod.properties
默认使用application.properties 的配置

application-dev.properties  测试环境
applicatio-prod.properties   测试环境
#  激活开发环境111      1120201126
spring.profiles.active=dev

2 多文档块模式：
3 激活命令方式：
命令行 --spring。profiles.active=dev
配置文件 Spring.profies.active=dev
jvm 参数 -Dspring.profiles.active=dev
在 开发工具上的edition   中设置虚拟机的参数
-Dspring.profiles.actove=dev
z注意  profiles:prod  #   指定属于那个环境


六  配置文件加载位置
spring boot 启动  会扫描一下位置的application.properties或者application.yml  文件 作为spring  boot的默认配置文件


-file:/config/
-file:./
-classpath:/config/
以上是按照优先级别从高到低的顺序  所在的 文件会被加载  高低优先级别会覆盖低级有优先配置内容

slf4j 使用
1 如何在系统中使用slf4j
在 开发时是日志记录方法调用，不应该直接调用日志实现类  而是调用日志抽象方法
给系统里面导入slf4j 的jar和logback 的实现jar


import  org.slf4j.logger;
import org.slef4j.Loggerfactory;
public   class  Helloworld
public    class  hellorld{
ppublic   static void    main(String [] args){

logger  logger=loggerFactory.getLogger(hellword.class)


logger.info("hello world")}
}

a  遗留的问题
a(slf4j+logback); Spring(commons-logging) ,hebnate(jboss-logging),Mybaties,  xxx
统一日志记录 ，即使是别的框架和我一起统一使用slf4j进行输出

使用
1 将系统中其他日志框架先排除出去
2 用中间包来替换原有的日志框架
3 导入slf4j的其他实现






28  spring boot  对静态资源的映射规则

添加资源映射

@Override
		public void addResourceHandlers(ResourceHandlerRegistry registry) {
			if (!this.resourceProperties.isAddMappings()) {
				logger.debug("Default resource handling disabled");
				return;
			}
			Duration cachePeriod = this.resourceProperties.getCache().getPeriod();
			CacheControl cacheControl = this.resourceProperties.getCache()
					.getCachecontrol().toHttpCacheControl();
			if (!registry.hasMappingForPattern("/webjars/**")) {
				customizeResourceHandlerRegistration(registry
						.addResourceHandler("/webjars/**")
						.addResourceLocations("classpath:/META-INF/resources/webjars/")
						.setCachePeriod(getSeconds(cachePeriod))
						.setCacheControl(cacheControl));
			}
			String staticPathPattern = this.mvcProperties.getStaticPathPattern();
			if (!registry.hasMappingForPattern(staticPathPattern)) {
				customizeResourceHandlerRegistration(
						registry.addResourceHandler(staticPathPattern)
								.addResourceLocations(getResourceLocations(
										this.resourceProperties.getStaticLocations()))
								.setCachePeriod(getSeconds(cachePeriod))
								.setCacheControl(cacheControl));
			}
		}
localhost：8080/webjars/jquery//jquery.js
<dependency>
<groupid>org.webjars</groupid>
<artifactid>jquery</artifactid>
<version>3.3.1</version>
</dependency>
2 /**  访问当前想的任何资源（静态资源文件夹）
"classpath:/meta-inf/resources/"
"classpath:/resources/"
"classpath:/static/"
"classpath:/public/"
"/": 当前项目的根路径
localhost：8080/abc====去静态资源文件夹找abc
3欢迎页面：静态资源文件下所以的index.html页面；  被/**映射
localhost：8080/  找index 页面

4所有的**/favicon.icon 都是在静态资源文件 下找




5   模板引擎  引用thymeleaf：
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
			2.1.6
		</dependency>
切换thymeleaf 版本
<properties>
<thymeleaf.version>3.0.9.RElEASE</thymeleaf.version>
<!布局功能的支持程序  thymeleaf3 主程序  layout2 以上版本>

</properties
>


2 ,   thymeleaf 使用&方法
@configurationProperties

@ConfigurationProperties(prefix = "spring.thymeleaf")
public class ThymeleafProperties {

	private static final Charset DEFAULT_ENCODING = StandardCharsets.UTF_8;

	public static final String DEFAULT_PREFIX = "classpath:/templates/";

	public static final String DEFAULT_SUFFIX = ".html";

	/**
	 * Whether to check that the template exists before rendering it.
	 */

	 只要我们把HTML 页面放在classpath：/template/，thymeleaf 就能自动渲染



	使用
	1 导入thymelea 的名称空间
<html lang="en" xmlns:th="http://www.thymeleaf.org"> 在html添加这段代码
	2
	使用thymmeleaf 的语法

onenote
2 表达式
http://192.168.191.1:8888/swagger-ui.htm



权限  管理系统  b 站视频
https://www.bilibili.com/video/BV1654y1B7Z5?p=4


多表联查
https://blog.csdn.net/qq_36747735/article/details/90044639


折腾resultMap extends属性，表关联查询。  作用
但是不同于resultmap使用extends，result标签是不可少的，一旦少了，将获取不到其属性值。

2021.8.3
实体类里面不要有下划线  !!!!

shop_carinfiid


https://www.cnblogs.com/sw-code/p/13956522.html

2021.8.6

推送到远程分支
https://blog.csdn.net/m0_53353811/article/details/111029462
15642926631@163.com
lianchao199202
